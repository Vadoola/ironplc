use core::fmt;
use std::{cmp::Ordering, hash::Hash, hash::Hasher};

/// Implements Identifier declared by 2.1.2.
///
/// 61131-3 declares that identifiers are case insensitive.
/// This class ensures that we do case insensitive comparisons
/// and can use containers as appropriate.
#[derive(Clone)]
pub struct Id {
    original: String,
    lower_case: String,
}

impl Id {
    /// Converts a `&str` into an `Identifier`.
    pub fn from(str: &str) -> Id {
        Id {
            original: String::from(str),
            lower_case: String::from(str).to_lowercase(),
        }
    }

    /// Returns a copy of the value.
    pub fn clone(&self) -> Id {
        Id::from(self.original.as_str())
    }

    /// Converts an `Identifier` into a `String`.
    ///
    /// The `String` representation is such that comparison
    /// to other `String` objects generated by `Identifier`
    /// are equal.
    pub fn to_string(&self) -> String {
        String::from(&self.lower_case)
    }

    /// Converts an `Identifier` into a lower case `String`.
    pub fn lower_case(&self) -> &String {
        &self.lower_case
    }
}

impl PartialEq for Id {
    fn eq(&self, other: &Self) -> bool {
        self.lower_case == other.lower_case
    }
}
impl Eq for Id {}

impl Hash for Id {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.lower_case.hash(state);
    }
}

impl fmt::Debug for Id {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(&self.original)
    }
}

impl fmt::Display for Id {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(&self.original)
    }
}

// TODO it is very questionable to have this part of equality
#[derive(Debug, Clone)]
pub struct SourceLoc {
    pub offset: usize,
}

impl SourceLoc {
    pub fn new(offset: usize) -> SourceLoc {
        SourceLoc { offset: offset }
    }
}

impl PartialEq for SourceLoc {
    fn eq(&self, other: &Self) -> bool {
        // TODO this is dubious - two source locations are equal? But to some
        // degree this is true because we don't care about the location for
        // equality purposes.
        true
    }
}
impl Eq for SourceLoc {}
